unit uSearch;

interface

uses
  uISearch,
  uEventManager,
  Classes;

type
  TSearch = class(TInterfacedObject, ISearch)
  private
    type
      TEventManager = class
        BeforeSearchEvents: TEvents;
        AfterSearchEvents: TEvents;
        BeforeFillResultEvents: TEvents;
        AfterFillResultEvents: TEvents;
        BeforeShowEvents: TEvents;
         AfterShowEvents: TEvents;
        BeforeCloseEvents: TEvents;
        AfterCloseEvents: TEvents;
      end;
  protected
    Events : TEventManager;
    OnSearch: TNotifyEvent;
    OnFillResult: TNotifyEvent;
    OnShow: TNotifyEvent;
    OnClose: TNotifyEvent;
  protected
     /// <summary>
    ///   Выполненить поиск (источник - определяется вами)
    /// </summary>
    procedure Search; virtual;
    /// <summary>
    ///   Заполнить объект представления резльтатами поиска
    /// </summary>
    procedure FillResult; virtual;
    /// <summary>
    ///   Открыть окно поиска
    /// </summary>
    procedure Show; virtual;
    /// <summary>
    ///   Закрыть окно поиска
    /// </summary>
    procedure Close; virtual;
  end;

implementation

{ TSearch }

procedure TSearch.Close;
begin
  Events
  if True then

end;

procedure TSearch.FillResult;
begin

end;

procedure TSearch.Search;
begin

end;

procedure TSearch.Show;
begin

end;

end.


